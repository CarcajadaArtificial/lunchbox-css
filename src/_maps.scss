@use 'lib/garlicss/media-queries.scss' as *;

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/// The $breakpoints variable is a Sass map containing the screen sizes for different devices.
///
/// @type {[key]: em}
///
/// @group media-queries
///
$breakpoints: (
  sm: 0em,
  md: 40em,
  lg: 100em,
);

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/// The $query-map variable is a Sass map containing common media query strings.
///
/// @type {[key]: string}
///
/// @group media-queries
///
$query-map: (
  only-sm: only-on($breakpoints, sm),
);

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/// This list contains the schematics of the design system grid. Every schematic will be a map that must comply the following structure.
/// - `cols {unitless}`: This property determines how many repetitions are set in the style `grid-template-columns: repeat($cols, ...)`.
/// - `gutter [length/percentage]`: This property determines the grid's `gap` style.
/// - `colwidth [length/percentage]`: This property determines the value set in the style `grid-template-columns: repeat(cols, minmax(colwidth, 1fr))`, and changes to `minmax($colwidth, $colwidth)` when the property `fixedcol` is true.
/// - `fixedcol [bool] {false}`: This property determines whether the grid's columns have a fixed width if true and flexible if false. When the value is true, it ignores the properties: `width` and `margin`, and assumes a reasonable and fixed `colwidth` length value.
/// - `width [length/percentage/keyword] {min-content}` This property determines the grid's width, which normally should be set to "auto" for a responsive layout. The default value is forced when the property `fixedcol` is true.
/// - `margin [length/percentage/auto] {auto}` This property determines the grid's horizontal margins value in the style `margin: 0 $margin`.
/// - `mq [string]`: This property is used to set the grids styles to a particular media query.
///
/// @type list
///
/// @group grid
///
///
$grid-schemas: (
    cols: 6,
    gutter: 0.8503100088rem,
    colwidth: 0,
    width: auto,
    margin: 0.8503100088rem,
    fixedcol: false,
    mq: only-on($breakpoints, sm),
  ),
  (
    cols: 12,
    gutter: 2.1257750221%,
    colwidth: 0,
    width: auto,
    margin: calc(23.13871222% - 134.488008342px),
    fixedcol: false,
    mq: only-on($breakpoints, md),
  ),
  (
    cols: 12,
    gutter: 1.5rem,
    colwidth: 4.5rem,
    fixedcol: true,
    mq: only-on($breakpoints, lg),
  );

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/// This map contains the schematis of the designed layouts for the grid. Every schematic will be a map that must comply the following structure:
/// - `_key {string}`: The key of the $layout-schemas map will be used as the name of the layout's class `.layout-#{$name}`.
/// - `span {unitless}`: Number of columns the modules will span.
/// - `offset {unitless}`: Number of columns the modules will skip.
/// - `variations {list}`: This list contains maps similar to this layout schema. Variations have two additional properties:
///   - `mq {string}`: Optional media query that affects this layout's variation.
///   - `pseudo {string}`: Optional pseudoclass that aids in spanning of layout module, e.g. `:nth-child(even)`
///
/// @type map
///
/// @group grid
///
$layout-schemas: (
  empty: (
    span: 1,
    offset: 0,
    variations: (),
  ),
  full: (
    span: 12,
    offset: 0,
    variations: (
      (
        mq: only-on($breakpoints, sm),
        span: 6,
        offset: 0,
      ),
    ),
  ),
  center: (
    span: 10,
    offset: 2,
    variations: (
      (
        mq: only-on($breakpoints, sm),
        span: 6,
        offset: 0,
      ),
    ),
  ),
  focus: (
    span: 8,
    offset: 3,
    variations: (
      (
        mq: only-on($breakpoints, sm),
        span: 4,
        offset: 2,
      ),
    ),
  ),
  halves: (
    span: 6,
    offset: 0,
    variations: (
      (
        mq: only-on($breakpoints, sm),
        span: 3,
        offset: 0,
      ),
    ),
  ),
  thirds: (
    span: 4,
    offset: 0,
    variations: (
      (
        mq: only-on($breakpoints, sm),
        span: 2,
        offset: 0,
      ),
    ),
  ),
  right: (
    span: 4,
    offset: 0,
    variations: (
      (
        pseudo: ':nth-child(even)',
        span: 8,
        offset: 0,
      ),
      (
        mq: only-on($breakpoints, sm),
        span: 1,
        offset: 0,
      ),
      (
        pseudo: ':nth-child(even)',
        mq: only-on($breakpoints, sm),
        span: 5,
        offset: 0,
      ),
    ),
  ),
  left: (
    span: 4,
    offset: 0,
    variations: (
      (
        pseudo: ':nth-child(odd)',
        span: 8,
        offset: 0,
      ),
      (
        mq: only-on($breakpoints, sm),
        span: 1,
        offset: 0,
      ),
      (
        pseudo: ':nth-child(odd)',
        mq: only-on($breakpoints, sm),
        span: 5,
        offset: 0,
      ),
    ),
  ),
);

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
$classless-layout-schema: (
  span: 12,
  offset: 0,
  variations: (
    (
      mq: only-on($breakpoints, sm),
      span: 6,
      offset: 0,
    ),
  ),
);

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/// This map contains the site's color palette. Every color must be named and assigned a unique color code. The schematic must have the following structure:
/// - _key {string}: The key to the color palette must be a unique name for the respective color.
/// - _value {color}: The color code for the individual tone in the palette.
///
/// @type map
///
/// @group color
///
$palette: (
  nube: #dfd9ff,
  vinca: #afbbfa,
  cielo: #7aadf5,
  azulejo: #1f84cc,
  cobalto: #1262b3,
  lapis: #000066,
  marino: #030f33,
  jade: #0f474d,
  cedro: #00806a,
  limon: #089969,
  mota: #12b362,
  musgo: #9eed77,
  alien: #d0fa7d,
  mantequilla: #f7ff99,
  arena: #fff7cc,
  tortilla: #ffea80,
  flan: #fabb64,
  ambar: #f59149,
  ladrillo: #cc5f29,
  arandano: #66050d,
  manzana: #b31b34,
  fresa: #e62e4d,
  chicle: #f7577f,
  bombon: #fc7ea8,
  pastel: #fa96c8,
  ajolote: #e9abf5,
  princesa: #d0bbfa,
  magia: #a37af5,
  lavanda: #6246eb,
  uva: #380899,
  turquesa: #088199,
  menta: #1fcccc,
  hielo: #7ae0f5,
  cajeta: #b36b24,
  vino: #400020,
  pulpo: #660546,
  pitahaya: #b3128a,
  borrador: #df76ba,
  obsidiana: #0c0a0d,
  chapopote: #241f26,
  grafito: #3d3640,
  hierro: #796c80,
  acero: #aca1b3,
  plata: #d5ced9,
  papel: #eee6f2,
  blanco: #ffffff,
);

$type-schema: (
  small: -1,
  paragraph: 0,
  subheading: 2,
  heading: 4,
  title: 5,
  display: 6,
);

$fonts: (
  base: (
    'Fira Code',
    ui-monospace,
    SFMono-Regular,
    Menlo,
    Monaco,
    Consolas,
    'Liberation Mono',
    'Courier New',
    monospace,
  ),
  heading: (
    'Alice',
    Baskerville,
    Palatino,
    Georgia,
    'Times New Roman',
    serif,
  ),
);

$font-schema: (
  small: 'base',
  paragraph: 'base',
  subheading: 'base',
  heading: 'heading',
  title: 'heading',
  display: 'heading',
);
